import typing

encryptedMessage = 163077576587089932277514178989798339755826189700674110151160860819557757512053108465634676999401755817425637794522932574265893488854028596522889419543378155476439015236106447427921542963150735762104095795184542

def totient(P, Q):
    return (P-1) * (Q-1)

def modularInverse(integer, modulo):
    pass

def FME(base, exponent, modulo):
    pass



def decrypt(p: int, q: int, e: int, c: int) -> str:
    print("beginning decryption...")

    p=435958568325940791799951965387214406385470910265220196318705482144524085345275999740244625255428455944579
    q=562545761726884103756277007304447481743876944007510545104946851094548396577479473472146228550799322939273
    n=p*q
    e=7

    psi = totient(p, q)
    inverseE = modularInverse(e, psi)
    m = FME(c, inverseE, n)

    return m
    


decrypt(1, 2, 3, 4)


